// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Create extends ethereum.Event {
  get params(): Create__Params {
    return new Create__Params(this);
  }
}

export class Create__Params {
  _event: Create;

  constructor(event: Create) {
    this._event = event;
  }

  get subject(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get maxSupply(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get redemptionEnd(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get floorPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Redeem extends ethereum.Event {
  get params(): Redeem__Params {
    return new Redeem__Params(this);
  }
}

export class Redeem__Params {
  _event: Redeem;

  constructor(event: Redeem) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get subject(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get popAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Trade extends ethereum.Event {
  get params(): Trade__Params {
    return new Trade__Params(this);
  }
}

export class Trade__Params {
  _event: Trade;

  constructor(event: Trade) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get subject(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get isBuy(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get popAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get ethAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get protocolEthAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get subjectEthAmount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get supply(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class popcart__popSubjectConfigResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getMaxSupply(): BigInt {
    return this.value0;
  }

  getRedemptionEnd(): BigInt {
    return this.value1;
  }

  getFloorPrice(): BigInt {
    return this.value2;
  }
}

export class popcart extends ethereum.SmartContract {
  static bind(address: Address): popcart {
    return new popcart("popcart", address);
  }

  getAvailableSupply(popSubject: Address): BigInt {
    let result = super.call(
      "getAvailableSupply",
      "getAvailableSupply(address):(uint256)",
      [ethereum.Value.fromAddress(popSubject)]
    );

    return result[0].toBigInt();
  }

  try_getAvailableSupply(popSubject: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAvailableSupply",
      "getAvailableSupply(address):(uint256)",
      [ethereum.Value.fromAddress(popSubject)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBuyPrice(popSubject: Address, amount: BigInt): BigInt {
    let result = super.call(
      "getBuyPrice",
      "getBuyPrice(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(popSubject),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBuyPrice(
    popSubject: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBuyPrice",
      "getBuyPrice(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(popSubject),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBuyPriceAfterFee(popSubject: Address, amount: BigInt): BigInt {
    let result = super.call(
      "getBuyPriceAfterFee",
      "getBuyPriceAfterFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(popSubject),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBuyPriceAfterFee(
    popSubject: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBuyPriceAfterFee",
      "getBuyPriceAfterFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(popSubject),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPrice(supply: BigInt, amount: BigInt, floorPrice: BigInt): BigInt {
    let result = super.call(
      "getPrice",
      "getPrice(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(supply),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(floorPrice)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPrice(
    supply: BigInt,
    amount: BigInt,
    floorPrice: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPrice",
      "getPrice(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(supply),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(floorPrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSellPrice(popSubject: Address, amount: BigInt): BigInt {
    let result = super.call(
      "getSellPrice",
      "getSellPrice(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(popSubject),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getSellPrice(
    popSubject: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSellPrice",
      "getSellPrice(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(popSubject),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSellPriceAfterFee(popSubject: Address, amount: BigInt): BigInt {
    let result = super.call(
      "getSellPriceAfterFee",
      "getSellPriceAfterFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(popSubject),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getSellPriceAfterFee(
    popSubject: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSellPriceAfterFee",
      "getSellPriceAfterFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(popSubject),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  popBalance(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "popBalance",
      "popBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_popBalance(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "popBalance",
      "popBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  popRedemptionBalance(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "popRedemptionBalance",
      "popRedemptionBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_popRedemptionBalance(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "popRedemptionBalance",
      "popRedemptionBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  popRedemptions(param0: Address): BigInt {
    let result = super.call(
      "popRedemptions",
      "popRedemptions(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_popRedemptions(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "popRedemptions",
      "popRedemptions(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  popSubjectConfig(param0: Address): popcart__popSubjectConfigResult {
    let result = super.call(
      "popSubjectConfig",
      "popSubjectConfig(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new popcart__popSubjectConfigResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_popSubjectConfig(
    param0: Address
  ): ethereum.CallResult<popcart__popSubjectConfigResult> {
    let result = super.tryCall(
      "popSubjectConfig",
      "popSubjectConfig(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new popcart__popSubjectConfigResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  popSupply(param0: Address): BigInt {
    let result = super.call("popSupply", "popSupply(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_popSupply(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("popSupply", "popSupply(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  protocolFeeDestination(): Address {
    let result = super.call(
      "protocolFeeDestination",
      "protocolFeeDestination():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_protocolFeeDestination(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "protocolFeeDestination",
      "protocolFeeDestination():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  protocolFeePercent(): BigInt {
    let result = super.call(
      "protocolFeePercent",
      "protocolFeePercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_protocolFeePercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "protocolFeePercent",
      "protocolFeePercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  subjectFeePercent(): BigInt {
    let result = super.call(
      "subjectFeePercent",
      "subjectFeePercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_subjectFeePercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "subjectFeePercent",
      "subjectFeePercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class BuyPopsCall extends ethereum.Call {
  get inputs(): BuyPopsCall__Inputs {
    return new BuyPopsCall__Inputs(this);
  }

  get outputs(): BuyPopsCall__Outputs {
    return new BuyPopsCall__Outputs(this);
  }
}

export class BuyPopsCall__Inputs {
  _call: BuyPopsCall;

  constructor(call: BuyPopsCall) {
    this._call = call;
  }

  get popSubject(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyPopsCall__Outputs {
  _call: BuyPopsCall;

  constructor(call: BuyPopsCall) {
    this._call = call;
  }
}

export class CreatePopCall extends ethereum.Call {
  get inputs(): CreatePopCall__Inputs {
    return new CreatePopCall__Inputs(this);
  }

  get outputs(): CreatePopCall__Outputs {
    return new CreatePopCall__Outputs(this);
  }
}

export class CreatePopCall__Inputs {
  _call: CreatePopCall;

  constructor(call: CreatePopCall) {
    this._call = call;
  }

  get popSubject(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get maxSupply(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get redemptionEnd(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get floorPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CreatePopCall__Outputs {
  _call: CreatePopCall;

  constructor(call: CreatePopCall) {
    this._call = call;
  }
}

export class RedeemPopsCall extends ethereum.Call {
  get inputs(): RedeemPopsCall__Inputs {
    return new RedeemPopsCall__Inputs(this);
  }

  get outputs(): RedeemPopsCall__Outputs {
    return new RedeemPopsCall__Outputs(this);
  }
}

export class RedeemPopsCall__Inputs {
  _call: RedeemPopsCall;

  constructor(call: RedeemPopsCall) {
    this._call = call;
  }

  get popSubject(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RedeemPopsCall__Outputs {
  _call: RedeemPopsCall;

  constructor(call: RedeemPopsCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SellPopsCall extends ethereum.Call {
  get inputs(): SellPopsCall__Inputs {
    return new SellPopsCall__Inputs(this);
  }

  get outputs(): SellPopsCall__Outputs {
    return new SellPopsCall__Outputs(this);
  }
}

export class SellPopsCall__Inputs {
  _call: SellPopsCall;

  constructor(call: SellPopsCall) {
    this._call = call;
  }

  get popSubject(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SellPopsCall__Outputs {
  _call: SellPopsCall;

  constructor(call: SellPopsCall) {
    this._call = call;
  }
}

export class SetFeeDestinationCall extends ethereum.Call {
  get inputs(): SetFeeDestinationCall__Inputs {
    return new SetFeeDestinationCall__Inputs(this);
  }

  get outputs(): SetFeeDestinationCall__Outputs {
    return new SetFeeDestinationCall__Outputs(this);
  }
}

export class SetFeeDestinationCall__Inputs {
  _call: SetFeeDestinationCall;

  constructor(call: SetFeeDestinationCall) {
    this._call = call;
  }

  get _feeDestination(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeDestinationCall__Outputs {
  _call: SetFeeDestinationCall;

  constructor(call: SetFeeDestinationCall) {
    this._call = call;
  }
}

export class SetProtocolFeePercentCall extends ethereum.Call {
  get inputs(): SetProtocolFeePercentCall__Inputs {
    return new SetProtocolFeePercentCall__Inputs(this);
  }

  get outputs(): SetProtocolFeePercentCall__Outputs {
    return new SetProtocolFeePercentCall__Outputs(this);
  }
}

export class SetProtocolFeePercentCall__Inputs {
  _call: SetProtocolFeePercentCall;

  constructor(call: SetProtocolFeePercentCall) {
    this._call = call;
  }

  get _feePercent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetProtocolFeePercentCall__Outputs {
  _call: SetProtocolFeePercentCall;

  constructor(call: SetProtocolFeePercentCall) {
    this._call = call;
  }
}

export class SetSubjectFeePercentCall extends ethereum.Call {
  get inputs(): SetSubjectFeePercentCall__Inputs {
    return new SetSubjectFeePercentCall__Inputs(this);
  }

  get outputs(): SetSubjectFeePercentCall__Outputs {
    return new SetSubjectFeePercentCall__Outputs(this);
  }
}

export class SetSubjectFeePercentCall__Inputs {
  _call: SetSubjectFeePercentCall;

  constructor(call: SetSubjectFeePercentCall) {
    this._call = call;
  }

  get _feePercent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSubjectFeePercentCall__Outputs {
  _call: SetSubjectFeePercentCall;

  constructor(call: SetSubjectFeePercentCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
