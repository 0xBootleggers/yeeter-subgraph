// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Create extends ethereum.Event {
  get params(): Create__Params {
    return new Create__Params(this);
  }
}

export class Create__Params {
  _event: Create;

  constructor(event: Create) {
    this._event = event;
  }

  get subject(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get maxSupply(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get redemptionEnd(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Redeem extends ethereum.Event {
  get params(): Redeem__Params {
    return new Redeem__Params(this);
  }
}

export class Redeem__Params {
  _event: Redeem;

  constructor(event: Redeem) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get subject(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get cropAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Trade extends ethereum.Event {
  get params(): Trade__Params {
    return new Trade__Params(this);
  }
}

export class Trade__Params {
  _event: Trade;

  constructor(event: Trade) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get subject(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get isBuy(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get cropAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get ethAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get protocolEthAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get subjectEthAmount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get supply(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class curve extends ethereum.SmartContract {
  static bind(address: Address): curve {
    return new curve("curve", address);
  }

  cropBalance(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "cropBalance",
      "cropBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_cropBalance(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cropBalance",
      "cropBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cropMaxSupply(param0: Address): BigInt {
    let result = super.call(
      "cropMaxSupply",
      "cropMaxSupply(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_cropMaxSupply(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cropMaxSupply",
      "cropMaxSupply(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cropRedemptionEnd(param0: Address): BigInt {
    let result = super.call(
      "cropRedemptionEnd",
      "cropRedemptionEnd(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_cropRedemptionEnd(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cropRedemptionEnd",
      "cropRedemptionEnd(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cropSupply(param0: Address): BigInt {
    let result = super.call("cropSupply", "cropSupply(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_cropSupply(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cropSupply", "cropSupply(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBuyPrice(cropSubject: Address, amount: BigInt): BigInt {
    let result = super.call(
      "getBuyPrice",
      "getBuyPrice(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cropSubject),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBuyPrice(
    cropSubject: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBuyPrice",
      "getBuyPrice(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cropSubject),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBuyPriceAfterFee(cropSubject: Address, amount: BigInt): BigInt {
    let result = super.call(
      "getBuyPriceAfterFee",
      "getBuyPriceAfterFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cropSubject),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBuyPriceAfterFee(
    cropSubject: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBuyPriceAfterFee",
      "getBuyPriceAfterFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cropSubject),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPrice(supply: BigInt, amount: BigInt): BigInt {
    let result = super.call("getPrice", "getPrice(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(supply),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_getPrice(supply: BigInt, amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPrice",
      "getPrice(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(supply),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSellPrice(cropSubject: Address, amount: BigInt): BigInt {
    let result = super.call(
      "getSellPrice",
      "getSellPrice(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cropSubject),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getSellPrice(
    cropSubject: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSellPrice",
      "getSellPrice(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cropSubject),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSellPriceAfterFee(cropSubject: Address, amount: BigInt): BigInt {
    let result = super.call(
      "getSellPriceAfterFee",
      "getSellPriceAfterFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cropSubject),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getSellPriceAfterFee(
    cropSubject: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSellPriceAfterFee",
      "getSellPriceAfterFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cropSubject),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  protocolFeeDestination(): Address {
    let result = super.call(
      "protocolFeeDestination",
      "protocolFeeDestination():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_protocolFeeDestination(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "protocolFeeDestination",
      "protocolFeeDestination():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  protocolFeePercent(): BigInt {
    let result = super.call(
      "protocolFeePercent",
      "protocolFeePercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_protocolFeePercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "protocolFeePercent",
      "protocolFeePercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  subjectFeePercent(): BigInt {
    let result = super.call(
      "subjectFeePercent",
      "subjectFeePercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_subjectFeePercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "subjectFeePercent",
      "subjectFeePercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class BuyCropsCall extends ethereum.Call {
  get inputs(): BuyCropsCall__Inputs {
    return new BuyCropsCall__Inputs(this);
  }

  get outputs(): BuyCropsCall__Outputs {
    return new BuyCropsCall__Outputs(this);
  }
}

export class BuyCropsCall__Inputs {
  _call: BuyCropsCall;

  constructor(call: BuyCropsCall) {
    this._call = call;
  }

  get cropSubject(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyCropsCall__Outputs {
  _call: BuyCropsCall;

  constructor(call: BuyCropsCall) {
    this._call = call;
  }
}

export class CreateCropCall extends ethereum.Call {
  get inputs(): CreateCropCall__Inputs {
    return new CreateCropCall__Inputs(this);
  }

  get outputs(): CreateCropCall__Outputs {
    return new CreateCropCall__Outputs(this);
  }
}

export class CreateCropCall__Inputs {
  _call: CreateCropCall;

  constructor(call: CreateCropCall) {
    this._call = call;
  }

  get cropSubject(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get maxSupply(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get redemptionEnd(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreateCropCall__Outputs {
  _call: CreateCropCall;

  constructor(call: CreateCropCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get cropSubject(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SellCropsCall extends ethereum.Call {
  get inputs(): SellCropsCall__Inputs {
    return new SellCropsCall__Inputs(this);
  }

  get outputs(): SellCropsCall__Outputs {
    return new SellCropsCall__Outputs(this);
  }
}

export class SellCropsCall__Inputs {
  _call: SellCropsCall;

  constructor(call: SellCropsCall) {
    this._call = call;
  }

  get cropSubject(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SellCropsCall__Outputs {
  _call: SellCropsCall;

  constructor(call: SellCropsCall) {
    this._call = call;
  }
}

export class SetFeeDestinationCall extends ethereum.Call {
  get inputs(): SetFeeDestinationCall__Inputs {
    return new SetFeeDestinationCall__Inputs(this);
  }

  get outputs(): SetFeeDestinationCall__Outputs {
    return new SetFeeDestinationCall__Outputs(this);
  }
}

export class SetFeeDestinationCall__Inputs {
  _call: SetFeeDestinationCall;

  constructor(call: SetFeeDestinationCall) {
    this._call = call;
  }

  get _feeDestination(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeDestinationCall__Outputs {
  _call: SetFeeDestinationCall;

  constructor(call: SetFeeDestinationCall) {
    this._call = call;
  }
}

export class SetProtocolFeePercentCall extends ethereum.Call {
  get inputs(): SetProtocolFeePercentCall__Inputs {
    return new SetProtocolFeePercentCall__Inputs(this);
  }

  get outputs(): SetProtocolFeePercentCall__Outputs {
    return new SetProtocolFeePercentCall__Outputs(this);
  }
}

export class SetProtocolFeePercentCall__Inputs {
  _call: SetProtocolFeePercentCall;

  constructor(call: SetProtocolFeePercentCall) {
    this._call = call;
  }

  get _feePercent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetProtocolFeePercentCall__Outputs {
  _call: SetProtocolFeePercentCall;

  constructor(call: SetProtocolFeePercentCall) {
    this._call = call;
  }
}

export class SetSubjectFeePercentCall extends ethereum.Call {
  get inputs(): SetSubjectFeePercentCall__Inputs {
    return new SetSubjectFeePercentCall__Inputs(this);
  }

  get outputs(): SetSubjectFeePercentCall__Outputs {
    return new SetSubjectFeePercentCall__Outputs(this);
  }
}

export class SetSubjectFeePercentCall__Inputs {
  _call: SetSubjectFeePercentCall;

  constructor(call: SetSubjectFeePercentCall) {
    this._call = call;
  }

  get _feePercent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSubjectFeePercentCall__Outputs {
  _call: SetSubjectFeePercentCall;

  constructor(call: SetSubjectFeePercentCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
